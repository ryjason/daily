什么是函数。

函数是把一些本来要重复和重复写的代码，发现他们的共性，并且做出简化。
在python中，有自带的函数；我们也可以自定义不同的函数。

如，abs( )这个函数， abs是这个函数的名字，（）里面放的是函数的参考值。在这里就是需要取绝对值的数。
abs(-100) # ==> 100
abs(20) # ==> 20
需要注意的是， 如果这个函数要求是一个参考值，那么只能放一个，不然会报错。

我们可以用def来自己定义一个函数。如：
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x

其中的return是为了返回最后计算的值的。有时候函数是没有返回结果的，只时候return会返回一个空值（none）
def list_sum(l):
    result = 0
    for num in l:
        result = result + num
    print('result is {}'.format(result))
    return

l = [1, 3, 5, 7, 9, 11]
result =list_sum(l) # 调用定义的sum_list函数并获得return返回的结果
print(result) # ==> None

打印的result，其实它是tuple类型，如果我们需要取出结果中的周长或者面积，使用对应位置的下标就可以获得对应的结果。
result = data_of_square(16)
C = result[0]
S = result[1]
print('周长 = {}'.format(C)) # ==> 周长 = 64
print('面积 = {}'.format(S)) # ==> 面积 = 256

理论上我们可以吧def写的很复杂，来满足我们需要的功能。
我们可以在函数里面定义另外一个函数，用来降低一个函数的复杂程度。
如果在一个函数内部调用其自身，这个函数就是递归函数。
可变参数通常使用*args， 这个是会把传入的元素编织成元组（tuple），缺点是没有下标。
def average(*args):
    sum = 0
    for item in args:
        sum += item
    avg = sum / len(args)
    return avg
average(1, 2) # ==> 1.5
average(1, 2, 2, 3, 4) # ==> 2.4
average()

**kwargs可以向里面输入数组。






