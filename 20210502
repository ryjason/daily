set和list类似，拥有一系列元素，但是set和list不一样，set里面的元素是不允许重复的，而list里面可以包含相同的元素；set与list的另一个区别是，set里面的元素是没有顺序的。

创建set的方法是用set( ),里面再放入一个list。list的元素会被转换成set：
s = set([1, 4, 3, 2, 5])
print(s) # ==> set([1, 2, 3, 4, 5])
这里的打印顺序和原始顺序不同是因为set是无序的。

同时，向上面说的一样。 Set里面的元素是不可以重复的，所以：
s = set([1, 4, 3, 2, 5, 4, 2, 3, 1])
print(s) # ==> set([1, 2, 3, 4, 5]）
Set打印出来的时候会把一样的元素给抹去，不重复打印。

访问set中的某个元素实际上就是判断一个元素是否在set中，这个时候我们可以使用in来判断某个元素是否在set中。
'Alice' in name_set # ==> True
用这种方法的时候，set会返回布尔值。

我们可以用add( )方法给set添加元素，如：
names = ['Alice', 'Bob', 'Candy', 'David', 'Ellena']
name_set = set(names)
name_set.add('Gina')
print(name_set) # ==> set(['Gina', 'Alice', 'Candy', 'David', 'Ellena', 'Bob’])

如果这个元素已经在set里面了，python是不会报错的（要注意的是add只能一个一个向set里面添加）
update是可以同时向set里面添加多个元素的方法，他的用法是可list里面的extend一样
names = ['Alice', 'Bob', 'Candy', 'David', 'Ellena']
new_names = ['Hally', 'Isen', 'Jenny', 'Karl']
name_set = set(names)
name_set.update(new_names) # ==> set(['Jenny', 'Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])

在set中，可以用remove()方法移除里面的元素。
name_set.remove('Jenny’)
需要注意的是，如果这的元素不存在，python会报错

discard()和remove()不同的是，当元素不存在时，使用discard()并不会引发错误
name_set.discard('Jenny’)

同时也可以用clear( )去清空所有的元素

这是用来判读子集和超集的：
s1 = set([1, 2, 3, 4, 5])
s2 = set([1, 2, 3, 4, 5, 6, 7, 8, 9])
# 判断s1是否为s2的子集
s1.issubset(s2) # ==> True
# 判断s2是否为s1的超集
s2.issuperset(s1) # ==> True

同时我们也可以用isdisjoint()方法去判断两个set是否有重合：
s1 = set([1, 2, 3, 4, 5])
s2 = set([1, 2, 3, 4, 5, 6, 7, 8, 9])
s1.isdisjoint(s2) # ==> False，因为有重复元素1、2、3、4、5






